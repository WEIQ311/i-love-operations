# ==============================================================================
# Nginx跨域(CORS)配置示例文件
# 作者: 技术专家
# 日期: 2025-10-24
# 说明: 本文件提供了不同场景下的Nginx跨域配置示例
# ==============================================================================

# ========================== 场景1: 基本API服务的跨域配置 ==========================
# 适用于大多数Web API服务的基础跨域配置

server {
    listen 80;
    server_name api.example.com;
    
    # 定义允许的源
    map $http_origin $cors_origin {
        ~^https?://(www\.)?example\.com$ $http_origin;
        ~^https?://(dev\.)?test\.com$ $http_origin;
        default "";
    }
    
    # 访问日志配置
    access_log /var/log/nginx/api.example.com.access.log main;
    error_log /var/log/nginx/api.example.com.error.log error;
    
    location /api {
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 3600;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 为实际请求添加CORS头部
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        add_header 'Access-Control-Allow-Credentials' 'true';
        
        # 代理到后端服务
        proxy_pass http://backend_api_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 代理超时设置
        proxy_connect_timeout 60;
        proxy_send_timeout 60;
        proxy_read_timeout 60;
    }
}

# ========================== 场景2: 静态资源的宽松跨域配置 ==========================
# 适用于需要被多个网站引用的静态资源(图片、字体、JS库等)

server {
    listen 80;
    server_name static.example.com;
    
    # 静态资源根目录
    root /var/www/static;
    
    # 访问日志配置
    access_log /var/log/nginx/static.example.com.access.log main;
    error_log /var/log/nginx/static.example.com.error.log error;
    
    location / {
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 为实际请求添加CORS头部
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
        
        # 静态文件缓存设置
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        
        # 尝试直接提供文件，不存在则返回404
        try_files $uri $uri/ =404;
    }
}

# ========================== 场景3: 带认证的API跨域配置 ==========================
# 适用于需要用户认证的API服务，包含JWT令牌支持

server {
    listen 443 ssl;
    server_name secure-api.example.com;
    
    # SSL配置
    ssl_certificate /etc/nginx/ssl/secure-api.example.com.crt;
    ssl_certificate_key /etc/nginx/ssl/secure-api.example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    
    # 定义允许的源
    map $http_origin $cors_origin {
        ~^https?://(www\.)?example\.com$ $http_origin;
        default "";
    }
    
    # 访问日志配置
    access_log /var/log/nginx/secure-api.example.com.access.log main;
    error_log /var/log/nginx/secure-api.example.com.error.log error;
    
    location /api/secure {
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Max-Age' 3600;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 为实际请求添加CORS头部
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        add_header 'Access-Control-Allow-Credentials' 'true';
        
        # 代理到后端安全服务
        proxy_pass http://secure_backend_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # JWT令牌传递
        proxy_set_header Authorization $http_authorization;
        
        # 代理超时设置
        proxy_connect_timeout 60;
        proxy_send_timeout 60;
        proxy_read_timeout 60;
    }
}

# ========================== 场景4: 多路径不同跨域策略 ==========================
# 同一服务器下不同路径应用不同的跨域策略

server {
    listen 80;
    server_name multi-api.example.com;
    
    # 访问日志配置
    access_log /var/log/nginx/multi-api.example.com.access.log main;
    error_log /var/log/nginx/multi-api.example.com.error.log error;
    
    # 路径1: 公共API - 允许所有域名访问
    location /api/public {
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 为实际请求添加CORS头部
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept';
        
        # 代理到公共API服务
        proxy_pass http://public_api_server;
    }
    
    # 路径2: 私有API - 仅允许特定域名访问并支持凭证
    location /api/private {
        # 定义允许的源
        map $http_origin $private_cors_origin {
            ~^https?://(www\.)?example\.com$ $http_origin;
            default "";
        }
        
        # 处理OPTIONS预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $private_cors_origin;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 3600;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        # 为实际请求添加CORS头部
        add_header 'Access-Control-Allow-Origin' $private_cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        add_header 'Access-Control-Allow-Credentials' 'true';
        
        # 代理到私有API服务
        proxy_pass http://private_api_server;
    }
}

# ==============================================================================
# 配置应用步骤:
# 1. 根据实际需求选择合适的配置场景
# 2. 修改配置中的域名、路径、后端服务地址等参数
# 3. 将配置添加到Nginx配置文件中
# 4. 检查配置语法: nginx -t
# 5. 重启或重新加载Nginx服务: nginx -s reload
# 
# 调试技巧:
# 1. 使用浏览器开发者工具的Network面板查看CORS头部
# 2. 检查Nginx访问日志和错误日志
# 3. 使用curl命令测试CORS配置: curl -I -H "Origin: http://example.com" http://api.example.com/api
# ==============================================================================