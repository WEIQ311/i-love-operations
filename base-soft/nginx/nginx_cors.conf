# ==============================================================================
# Nginx跨域(CORS)配置文件
# 作者: 技术专家
# 日期: 2025-10-24
# ==============================================================================

# ========================== 全局CORS配置 ==========================
# 可以在http块中包含此文件，为所有server块提供CORS支持
# 或者在特定的server块或location块中使用以下配置

# -------------------------- 基础跨域配置 --------------------------
# 以下是基础的跨域配置示例，可以根据需求调整

map $http_origin $cors_origin {
    # 允许特定域名跨域访问
    ~^https?://(www\.)?example\.com$ $http_origin;
    ~^https?://(dev\.)?test\.com$ $http_origin;
    # 默认不允许其他域名
    default "";
}

# 定义允许的HTTP方法
set $cors_methods "GET, POST, PUT, DELETE, OPTIONS";

# 定义允许的HTTP头部
set $cors_headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";

# -------------------------- 宽松的跨域配置 --------------------------
# 注意：此配置允许所有域名访问，仅适用于开发环境或公共API
# map $http_origin $cors_origin {
#     default $http_origin;
# }

# ========================== 常用CORS配置片段 ==========================

# -------------------------- 用于location块的CORS配置 --------------------------
# 将此配置放在需要启用CORS的location块中

# 启用跨域支持的location配置示例
# location /api {
#     # 允许预检请求
#     if ($request_method = 'OPTIONS') {
#         add_header 'Access-Control-Allow-Origin' $cors_origin;
#         add_header 'Access-Control-Allow-Methods' $cors_methods;
#         add_header 'Access-Control-Allow-Headers' $cors_headers;
#         add_header 'Access-Control-Max-Age' 3600;
#         add_header 'Content-Type' 'text/plain charset=UTF-8';
#         add_header 'Content-Length' 0;
#         return 204;
#     }
#     
#     # 为所有其他请求添加CORS头部
#     add_header 'Access-Control-Allow-Origin' $cors_origin;
#     add_header 'Access-Control-Allow-Methods' $cors_methods;
#     add_header 'Access-Control-Allow-Headers' $cors_headers;
#     add_header 'Access-Control-Allow-Credentials' 'true';
#     
#     # 其他location配置...
#     proxy_pass http://backend_server;
# }

# -------------------------- 完整的CORS示例Server配置 --------------------------
# 完整的支持CORS的服务器配置示例

# server {
#     listen 80;
#     server_name api.example.com;
#     
#     # 配置允许的来源
#     map $http_origin $cors_origin {
#         ~^https?://(www\.)?example\.com$ $http_origin;
#         ~^https?://(dev\.)?test\.com$ $http_origin;
#         default "";
#     }
#     
#     location / {
#         # 处理OPTIONS预检请求
#         if ($request_method = 'OPTIONS') {
#             add_header 'Access-Control-Allow-Origin' $cors_origin;
#             add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
#             add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
#             add_header 'Access-Control-Max-Age' 3600;
#             add_header 'Content-Type' 'text/plain charset=UTF-8';
#             add_header 'Content-Length' 0;
#             return 204;
#         }
#         
#         # 为实际请求添加CORS头部
#         add_header 'Access-Control-Allow-Origin' $cors_origin;
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
#         add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
#         add_header 'Access-Control-Allow-Credentials' 'true';
#         
#         # 代理配置
#         proxy_pass http://backend_service;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }

# ========================== 高级CORS配置 ==========================

# -------------------------- 按路径控制CORS --------------------------
# 不同路径应用不同的CORS策略

# map $request_uri $custom_cors_policy {
#     ~^/api/public    "public";
#     ~^/api/private   "private";
#     default "default";
# }
# 
# server {
#     # ... 其他配置 ...
#     
#     location /api {
#         # 处理OPTIONS请求
#         if ($request_method = 'OPTIONS') {
#             if ($custom_cors_policy = "public") {
#                 add_header 'Access-Control-Allow-Origin' '*';
#             } 
#             elsif ($custom_cors_policy = "private") {
#                 add_header 'Access-Control-Allow-Origin' $cors_origin;
#                 add_header 'Access-Control-Allow-Credentials' 'true';
#             } else {
#                 add_header 'Access-Control-Allow-Origin' $cors_origin;
#             }
#             
#             add_header 'Access-Control-Allow-Methods' $cors_methods;
#             add_header 'Access-Control-Allow-Headers' $cors_headers;
#             add_header 'Access-Control-Max-Age' 3600;
#             add_header 'Content-Type' 'text/plain charset=UTF-8';
#             add_header 'Content-Length' 0;
#             return 204;
#         }
#         
#         # 为实际请求添加CORS头部
#         if ($custom_cors_policy = "public") {
#             add_header 'Access-Control-Allow-Origin' '*';
#         } 
#         elsif ($custom_cors_policy = "private") {
#             add_header 'Access-Control-Allow-Origin' $cors_origin;
#             add_header 'Access-Control-Allow-Credentials' 'true';
#         } else {
#             add_header 'Access-Control-Allow-Origin' $cors_origin;
#         }
#         
#         add_header 'Access-Control-Allow-Methods' $cors_methods;
#         add_header 'Access-Control-Allow-Headers' $cors_headers;
#         
#         # 代理配置
#         proxy_pass http://backend_service;
#     }
# }

# -------------------------- 安全注意事项 --------------------------
# 1. 在生产环境中，避免使用 '*' 作为Access-Control-Allow-Origin
# 2. 当设置Access-Control-Allow-Credentials为true时，不能使用 '*' 作为origin
# 3. 限制Access-Control-Allow-Methods为实际需要的HTTP方法
# 4. 根据实际需求调整Access-Control-Allow-Headers
# 5. 合理设置Access-Control-Max-Age的值，过长可能存在安全风险
# 6. 考虑为敏感API添加额外的安全措施，如JWT认证、IP白名单等

# ==============================================================================
# 使用说明:
# 1. 将此文件保存为nginx_cors.conf
# 2. 在主nginx.conf中通过include指令引入此文件
# 3. 根据实际需求调整配置中的域名、路径和策略
# 4. 重启或重新加载nginx服务使配置生效: nginx -s reload
# ==============================================================================